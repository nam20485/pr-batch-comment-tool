name: Development Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_NAME: 'GitHubPrTool'

jobs:
  # Quick validation for faster feedback
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Debug --no-restore
      
    - name: Quick unit tests
      run: dotnet test --configuration Debug --no-build --verbosity minimal --filter "Category!=Integration&Category!=E2E"

  # Comprehensive testing and scanning
  full-pipeline:
    name: Full Development Pipeline
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Code formatting check
      run: |
        dotnet tool install -g dotnet-format
        dotnet format --verify-no-changes --verbosity diagnostic
        
    - name: Build solution
      run: dotnet build --configuration Release --no-restore /warnaserror
      
    - name: Run all tests with coverage
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true
        
    - name: Security vulnerability check
      run: |
        echo "Checking for known security vulnerabilities..."
        dotnet list package --vulnerable --include-transitive || true
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        
    - name: Build for security analysis
      run: dotnet build --configuration Release --no-restore
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  # Integration tests (if they exist)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: validate
    if: contains(github.event.head_commit.message, '[integration]') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run integration tests
      run: dotnet test --configuration Release --no-build --verbosity normal --filter "Category=Integration" || echo "No integration tests found"

  # Performance testing (if needed)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: validate
    if: contains(github.event.head_commit.message, '[perf]') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run performance tests
      run: dotnet test --configuration Release --no-build --verbosity normal --filter "Category=Performance" || echo "No performance tests found"

  # Development artifact creation
  create-dev-artifacts:
    name: Create Development Artifacts
    runs-on: ubuntu-latest
    needs: [full-pipeline]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build and publish development version
      run: |
        # Generate development version number
        DEV_VERSION="0.0.0-dev.$(date +%Y%m%d).$(git rev-parse --short HEAD)"
        echo "Development version: $DEV_VERSION"
        
        dotnet publish src/GitHubPrTool.Desktop/GitHubPrTool.Desktop.csproj \
          --configuration Release \
          --runtime linux-x64 \
          --self-contained true \
          --output ./publish/linux-x64 \
          /p:Version=$DEV_VERSION \
          /p:PublishSingleFile=true \
          /p:PublishTrimmed=false
        
    - name: Upload development artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-dev-linux-x64
        path: ./publish/linux-x64
        retention-days: 7