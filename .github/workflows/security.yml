name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: List packages for audit
      run: dotnet list package --vulnerable --include-transitive --format json > package-vulnerabilities.json
      continue-on-error: true
      
    - name: Run .NET package vulnerability scan
      run: |
        echo "Checking for vulnerable packages..."
        dotnet list package --vulnerable --include-transitive --format json > package-vulnerabilities.json
        if jq -e '.projects[].frameworks[].topLevelPackages[]?.vulnerabilities or .projects[].frameworks[].transitivePackages[]?.vulnerabilities' package-vulnerabilities.json > /dev/null 2>&1; then
          echo "❌ Vulnerable packages found!"
          jq '.projects[].frameworks[] | (.topLevelPackages[]?, .transitivePackages[]?) | select(.vulnerabilities) | {id: .id, vulnerabilities: .vulnerabilities}' package-vulnerabilities.json
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi
      
    - name: Upload vulnerability report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: package-vulnerabilities
        path: package-vulnerabilities.json

  codeql-scan:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-extended,security-and-quality
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore

    - name: Build for security analysis
      run: dotnet build --configuration Release --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"
        upload: true

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run Secretlint
      uses: secretlint/secretlint-action@v1
      with:
        args: "**/*"
      continue-on-error: true
      
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  supply-chain-scan:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install dotnet-outdated
      run: dotnet tool install --global dotnet-outdated-tool
      
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        dotnet outdated --upgrade --fail-on-updates || true
        
    - name: Cache SBOM Tool
      uses: actions/cache@v4
      id: cache-sbom-tool
      with:
        path: .tools
        key: sbom-tool-v2.2.7-${{ runner.os }}
        restore-keys: |
          sbom-tool-v2.2.7-
          sbom-tool-
    
    - name: Install SBOM Tool
      if: steps.cache-sbom-tool.outputs.cache-hit != 'true'
      run: |
        mkdir -p .tools
        dotnet tool install --tool-path .tools Microsoft.Sbom.Targets --version 2.2.7
    
    - name: Generate SBOM (Software Bill of Materials)
      run: |
        dotnet restore
        # Extract project metadata dynamically from project files
        MAIN_CSPROJ=$(find ./src -maxdepth 2 -name "*.Desktop.csproj" | head -n 1)
        if [ -z "$MAIN_CSPROJ" ]; then
          MAIN_CSPROJ=$(find ./src -maxdepth 2 -name "*.csproj" | head -n 1)
        fi
        echo "Using project file: $MAIN_CSPROJ"
        
        # Extract project name (prefer AssemblyName, fallback to PackageId, then filename)
        PROJECT_NAME=$(grep -oP '<AssemblyName>\K[^<]+' "$MAIN_CSPROJ" 2>/dev/null || \
                      grep -oP '<PackageId>\K[^<]+' "$MAIN_CSPROJ" 2>/dev/null || \
                      basename "$MAIN_CSPROJ" .csproj)
        
        # Extract version dynamically from project file
        VERSION=$(grep -oP '<Version>\K[^<]+' "$MAIN_CSPROJ" 2>/dev/null || echo "1.0.0")
        
        # Use environment variable for supplier with fallback
        SUPPLIER="${SBOM_SUPPLIER:-nam20485}"
        
        echo "Detected project name: $PROJECT_NAME"
        echo "Detected version: $VERSION"
        echo "Using supplier: $SUPPLIER"
        
        # Generate SBOM for the main application
        ./.tools/sbom-tool generate -b ./src -bc ./src -pn "$PROJECT_NAME" -pv "$VERSION" -ps "$SUPPLIER" -nsb https://github.com/nam20485/pr-batch-comment-tool
      continue-on-error: true
      
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: software-bill-of-materials
        path: ./_manifest/spdx_2.2/*.spdx.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-scan, secrets-scan, supply-chain-scan]
    if: always()
    
    steps:
    - name: Download vulnerability reports
      uses: actions/download-artifact@v5
      with:
        name: package-vulnerabilities
        path: ./security-reports
      continue-on-error: true
      
    - name: Download SBOM
      uses: actions/download-artifact@v5
      with:
        name: software-bill-of-materials
        path: ./security-reports
      continue-on-error: true
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- **CodeQL Analysis**: ${{ needs.codeql-scan.result }}" >> security-summary.md
        echo "- **Secrets Detection**: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- **Supply Chain Scan**: ${{ needs.supply-chain-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Report Date" >> security-summary.md
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md