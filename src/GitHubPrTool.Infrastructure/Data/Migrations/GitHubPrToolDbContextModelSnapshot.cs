// <auto-generated />
using System;
using GitHubPrTool.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GitHubPrTool.Infrastructure.Data.Migrations
{
    [DbContext(typeof(GitHubPrToolDbContext))]
    partial class GitHubPrToolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("GitHubPrTool.Core.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(65000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CommitId")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DiffHunk")
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long?>("InReplyToId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMultiLine")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Line")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalCommitId")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OriginalLine")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OriginalPosition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PullRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Side")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StartLine")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartSide")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("InReplyToId");

                    b.HasIndex("PullRequestId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("Type");

                    b.HasIndex("Path", "Line")
                        .HasFilter("Path IS NOT NULL AND Line IS NOT NULL");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.PullRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Additions")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseBranch")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .HasMaxLength(65000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ChangedFiles")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Commits")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Deletions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeadBranch")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Mergeable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("MergedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("MergedById")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RepositoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("MergedById");

                    b.HasIndex("State");

                    b.HasIndex("RepositoryId", "Number")
                        .IsUnique();

                    b.ToTable("PullRequests", (string)null);
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.Repository", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CloneUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DefaultBranch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ForksCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OpenIssuesCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Private")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("PushedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("StargazersCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Repositories", (string)null);
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasMaxLength(65000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CommitId")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("PullRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PullRequestUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PullRequestId");

                    b.HasIndex("State");

                    b.HasIndex("SubmittedAt");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.Comment", b =>
                {
                    b.HasOne("GitHubPrTool.Core.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GitHubPrTool.Core.Models.Comment", "InReplyTo")
                        .WithMany("Replies")
                        .HasForeignKey("InReplyToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GitHubPrTool.Core.Models.PullRequest", "PullRequest")
                        .WithMany("Comments")
                        .HasForeignKey("PullRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GitHubPrTool.Core.Models.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("InReplyTo");

                    b.Navigation("PullRequest");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.PullRequest", b =>
                {
                    b.HasOne("GitHubPrTool.Core.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GitHubPrTool.Core.Models.User", "MergedBy")
                        .WithMany()
                        .HasForeignKey("MergedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GitHubPrTool.Core.Models.Repository", "Repository")
                        .WithMany("PullRequests")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("MergedBy");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.Repository", b =>
                {
                    b.HasOne("GitHubPrTool.Core.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.Review", b =>
                {
                    b.HasOne("GitHubPrTool.Core.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GitHubPrTool.Core.Models.PullRequest", "PullRequest")
                        .WithMany("Reviews")
                        .HasForeignKey("PullRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("PullRequest");
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.PullRequest", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.Repository", b =>
                {
                    b.Navigation("PullRequests");
                });

            modelBuilder.Entity("GitHubPrTool.Core.Models.Review", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
